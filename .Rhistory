# import the CSV file
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
library(tidyverse)
wbcd <- read_csv("source/Chapter03/wisc_bc_data.csv")
wbcd
?read_csv
# examine the structure of the wbcd data frame
str(wbcd)
wbcd %>% glimpse()
wbcd
wbcd[-1]
wbcd <- wbcd[-1]
table(wbcd$diagnosis)
wbcd %>%
count(diagnosis)
wbcd %>%
mutate(
diagnosis = factor(diagnosis,
levels = c("B", "M"),
labels = c("Benign", "Malignant"))
)
wbcd <- wbcd %>%
mutate(
diagnosis = factor(diagnosis,
levels = c("B", "M"),
labels = c("Benign", "Malignant"))
)
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
wbcd %>%
count(diagnosis)
wbcd %>%
count(diagnosis) %>%
mutate(rate = n/sum(n))
wbcd %>%
count(diagnosis) %>%
mutate(rate = n/sum(n)* 100)
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
wbcd %>%
count(diagnosis) %>%
mutate(rate = n/sum(n)* 100)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
wbcd %>%
select(radius_mean, area_mean, smoothness_mean)
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
summary()
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
wbcd
# tidy:
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
summary()
wbcd %>%
select(radius_mean, area_mean, smoothness_mean)
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
)
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
ggplot(aes(parameter, value)) +
geom_boxplot()
# tidy:
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
summary()
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
)
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter) %>%
mutate(z_value = normalize(value))
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter) %>%
mutate(z_value = normalize(value)) %>%
ungroup()
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter) %>%
mutate(z_value = normalize(value)) %>%
ungroup() %>%
ggplot(aes(parameter, value)) +
geom_boxplot()
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter) %>%
mutate(z_value = normalize(value)) %>%
ungroup() %>%
ggplot(aes(parameter, z_value)) +
geom_boxplot()
lapply(wbcd[2:31], normalize)
as.data.frame(lapply(wbcd[2:31], normalize))
as_tibble(lapply(wbcd[2:31], normalize))
lapply(wbcd[2:31], normalize) %>% as_tibble()
colnames(wbcd)
length(colnames(wbcd))
lapply(wbcd[2:length(colnames(wbcd))], normalize) %>% as_tibble()
lapply(wbcd[2:length(colnames(wbcd))], normalize) %>%
as_tibble()
wbcd[2:length(colnames(wbcd))] %>%
lapply(normalize) %>%
as_tibble()
# tidy
wbcd_n <- wbcd[2:length(colnames(wbcd))] %>%
lapply(normalize) %>%
as_tibble()
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
wbcd_n
# tidy
wbcd_n <- wbcd[2:length(colnames(wbcd))] %>%
lapply(normalize) %>%
as_tibble()
wbcd_n
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
wbcd_train
wbcd_train_labels
wbcd_train
wbcd_test
wbcd_test_pred <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels,
k = 21)
?knn
wbcd_train
wbcd_train_labels
wbcd_train
wbcd_train_labels
wbcd_test_pred <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels %>% pull(),
k = 21)
wbcd_train_labels <- wbcd[1:469, 1] %>% pull()
wbcd_test_labels <- wbcd[470:569, 1] %>% pull()
wbcd_test_pred <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels,
k = 21)
wbcd_test_pred
# load the "gmodels" library
library(gmodels)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
CrossTable
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
?CrossTable
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as_tibble()
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as.data.frame()
wbcd_test_labels
wbcd_test_labels %>% count()
wbcd[470:569, 1] %>% count()
wbcd[470:569, 1]
wbcd[470:569, 1] %>% count(diagnosis)
wbcd_test_pred
wbcd_test_labels %>% as_tibble()
wbcd_test_labels %>% as_tibble() count(value)
wbcd_test_labels %>% as_tibble() %>% count(value)
wbcd_test_pred   %>% as_tibble() %>% count(value)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% pull()
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% ulist()
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% unlist()
(CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE))$t1
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)$t1
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE)
CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as.data.frame()
0.05128205 + 0.94871795
cross_table <- CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as.data.frame()
cross_table
cross_table <- CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as_tibble()
cross_table
cross_table <- CrossTable(x = wbcd_test_labels,
y = wbcd_test_pred,
prop.chisq = FALSE) %>% as.data.frame()
cross_table %>% as_tibble()
cross_table %>%
as_tibble() %>%
mutate(check = t.x = t.y) %>%
select(check)
cross_table %>%
as_tibble() %>%
mutate(check = t.x = t.y)
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
select(check)
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
group_by(check) %>%
summarise(check_sum = sum(t.Freq))
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
group_by(check) %>%
summarise(check_sum = sum(t.Freq)) %>%
mutate(result = check_sum/sum(check_sum))
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
group_by(check) %>%
summarise(check_sum = sum(t.Freq)) %>%
mutate(result = check_sum/sum(check_sum)) %>%
filter(check == TRUE) %>%
pull()
wbcd %>%
select(radius_mean, area_mean, smoothness_mean) %>%
pivot_longer(
cols = everything(),
names_to = "parameter",
values_to = "value"
) %>%
group_by(parameter) %>%
mutate(n_value = normalize(value)) %>%
ungroup() %>%
ggplot(aes(parameter, n_value)) +
geom_boxplot()
wbcd_z <- as.data.frame(scale(wbcd[-1]))
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
# re-classify test cases
wbcd_test_pred <- knn(train = wbcd_train,
test = wbcd_test,
cl = wbcd_train_labels, k = 21)
wbcd_test_pred
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
group_by(check) %>%
summarise(check_sum = sum(t.Freq)) %>%
mutate(result = check_sum/sum(check_sum)) %>%
filter(check == TRUE) %>%
pull()
wbcd_test_pred
wbcd_test_labels
wbcd_train
wbcd_test
wbcd_train_labels
cross_table %>%
as_tibble() %>%
mutate(check = t.x == t.y) %>%
group_by(check) %>%
summarise(check_sum = sum(t.Freq)) %>%
mutate(result = check_sum/sum(check_sum)) %>%
filter(check == TRUE) %>%
pull()
library(tidyverse) # инструменты
sms_spam <- read_csv("source/Chapter04/sms_spam.csv")
sms_spam
sms_spam %>% glimpse()
library(tm)
rm(sms_spam)
sms_raw <- read_csv("source/Chapter04/sms_spam.csv")
sms_raw %>% glimpse()
sms_raw %>%
mutate(type = factor(type))
sms_raw <- sms_raw %>%
mutate(type = factor(type))
VCorpus(VectorSource(sms_raw$text))
VectorSource(sms_raw$text)
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
library(tidyverse) # инструменты
library(class)     # метод KNN
library(gmodels)   # Оценка эффективности модели
wbcd <- read_csv("source/Chapter03/wisc_bc_data.csv")
wbcd %>% glimpse()
wbcd <- read_csv("source/Chapter03/wisc_bc_data.csv")
library(tidyverse) # инструменты
library(class)     # метод KNN
library(gmodels)   # Оценка эффективности модели
wbcd <- read_csv("source/Chapter03/wisc_bc_data.csv")
library(tidyverse) # инструменты
library(tm)        # работа с текстами
sms_raw <- read_csv("source/Chapter04/sms_spam.csv")
sms_raw %>% glimpse()
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_raw$type <- factor(sms_raw$type)
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
print(sms_corpus)
sms_corpus
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers)            # Удаляем числа
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords()) # Удаляем стопслова
sms_corpus_clean <- tm_map(sms_corpus_clean, removePunctuation)        # Удаляем пунктуацию
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
replacePunctuation("hello...world")
removePunctuation("hello...world")
# clean up the corpus using tm_map()
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))   # Приведём все слова в нижний регистр
# функция для исключения пунктуационных символов
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
sms_corpus_clean <- tm_map(sms_corpus_clean, replacePunctuation)        # Удаляем пунктуацию
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))   # Приведём все слова в нижний регистр
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers)            # Удаляем числа
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords()) # Удаляем стопслова
sms_corpus_clean <- tm_map(sms_corpus_clean, replacePunctuation)        # Удаляем пунктуацию
# функция для исключения пунктуационных символов
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))   # Приведём все слова в нижний регистр
sms_corpus_clean <- tm_map(sms_corpus_clean, removeNumbers)            # Удаляем числа
sms_corpus_clean <- tm_map(sms_corpus_clean, removeWords, stopwords()) # Удаляем стопслова
sms_corpus_clean <- tm_map(sms_corpus_clean, replacePunctuation)        # Удаляем пунктуацию
# функция для исключения пунктуационных символов
replacePunctuation <- function(x) { gsub("[[:punct:]]+", " ", x) }
library(SnowballC)
wordStem(c("learn", "learned", "learning", "learns"))
stemDocument
stopwords
?stopwords
stopwords("russian")
sms_corpus_clean <- tm_map(sms_corpus_clean, stripWhitespace) # удаление лишних пробелов
sms_dtm <- DocumentTermMatrix(sms_corpus_clean)
sms_dtm
sms_corpus_clean
DocumentTermMatrix(sms_corpus_clean)
sms_raw <- read_csv("source/Chapter04/sms_spam.csv")
sms_raw %>% glimpse()
sms_raw$type <- factor(sms_raw$type)
sms_corpus
lapply(sms_corpus[1:3], as.character)
lapply(sms_corpus_clean[1:3], as.character)
lapply(sms_corpus[1:3], as.character)
sms_corpus_clean
sms_corpus
